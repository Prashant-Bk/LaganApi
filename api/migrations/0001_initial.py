# Generated by Django 5.1.4 on 2024-12-28 08:59

import datetime
import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Interests',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('favorite_music_genres', models.TextField(blank=True, help_text='List genres separated by commas', null=True, verbose_name='Favorite Music Genres')),
                ('favorite_movies', models.TextField(blank=True, null=True, verbose_name='Favorite Movies')),
                ('favorite_books', models.TextField(blank=True, null=True, verbose_name='Favorite Books')),
                ('favorite_books_genres', models.TextField(blank=True, null=True, verbose_name='Favorite Books')),
                ('sports', models.TextField(blank=True, null=True, verbose_name='Sports Interested In')),
                ('travel_destinations', models.TextField(blank=True, null=True, verbose_name='Dream Travel Destinations')),
                ('social_activities', models.TextField(blank=True, null=True, verbose_name='Social Activities Enjoyed')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='interests_profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Lifestyle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('smoking', models.CharField(choices=[('never', 'Never'), ('occasionally', 'Occasionally'), ('regularly', 'Regularly')], max_length=20, verbose_name='Smoking Habits')),
                ('drinking', models.CharField(choices=[('never', 'Never'), ('socially', 'Socially'), ('regularly', 'Regularly')], max_length=20, verbose_name='Drinking Habits')),
                ('dietary_preference', models.CharField(choices=[('vegetarian', 'Vegetarian'), ('non_vegetarian', 'Non-Vegetarian'), ('vegan', 'Vegan'), ('other', 'Other')], max_length=20, verbose_name='Dietary Preference')),
                ('fitness_level', models.CharField(choices=[('not_active', 'Not Active'), ('moderately_active', 'Moderately Active'), ('very_active', 'Very Active')], max_length=20, verbose_name='Fitness Level')),
                ('sleep_schedule', models.CharField(blank=True, max_length=100, null=True, verbose_name='Sleep Schedule')),
                ('hobbies', models.TextField(blank=True, help_text='List hobbies separated by commas', verbose_name='Hobbies')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='lifestyle_profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PartnerPreference',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('age_range', models.CharField(help_text='E.g., 25-35', max_length=6, verbose_name='Preferred Age Range')),
                ('height_range', models.CharField(help_text='E.g., 5\'2"-6\'0"', max_length=20, verbose_name='Preferred Height Range')),
                ('nationality_preference', models.CharField(default='Nepali', max_length=100, verbose_name='Preferred Nationality')),
                ('religion_preference', models.CharField(default='Any', max_length=100, verbose_name='Preferred Religion')),
                ('caste_preference', models.CharField(default='Any', max_length=100, verbose_name='Preferred Caste')),
                ('smoking_preference', models.CharField(choices=[('never', 'Never'), ('occasionally', 'Occasionally'), ('regularly', 'Regularly')], max_length=20, verbose_name='Smoking Habits Preference')),
                ('drinking_preference', models.CharField(choices=[('never', 'Never'), ('socially', 'Socially'), ('regularly', 'Regularly')], max_length=20, verbose_name='Drinking Habits Preference')),
                ('dietary_preference', models.CharField(choices=[('vegetarian', 'Vegetarian'), ('non_vegetarian', 'Non-Vegetarian'), ('vegan', 'Vegan'), ('other', 'Other')], max_length=20, verbose_name='Dietary Preference')),
                ('fitness_level_preference', models.CharField(choices=[('not_active', 'Not Active'), ('moderately_active', 'Moderately Active'), ('very_active', 'Very Active')], max_length=20, verbose_name='Fitness Level Preference')),
                ('interests_overlap', models.BooleanField(default=False, verbose_name='Similar Interests Required?')),
                ('location_preference', models.CharField(blank=True, max_length=100, null=True, verbose_name='Preferred Patner Location')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='partner_preference_profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Photos',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='photos/')),
                ('pic1', models.ImageField(blank=True, null=True, upload_to='photos/')),
                ('pic2', models.ImageField(blank=True, null=True, upload_to='photos/')),
                ('pic3', models.ImageField(blank=True, null=True, upload_to='photos/')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='photos', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Primary',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('phone_number', models.CharField(blank=True, help_text='Phone number in international format (e.g., +1234567890).', max_length=15, null=True, unique=True, validators=[django.core.validators.RegexValidator(message='Enter a valid phone number, e.g., +1234567890.', regex='^\\+?[1-9]\\d{1,14}$')])),
                ('dob', models.DateField(help_text='Enter your date of birth.', validators=[django.core.validators.MinValueValidator(limit_value=datetime.date(1900, 1, 1), message='DOB must be after 1900.')])),
                ('gender', models.CharField(choices=[('male', 'Male'), ('female', 'Female'), ('other', 'Other')], max_length=10)),
                ('address', models.TextField(blank=True, null=True)),
                ('height', models.FloatField(blank=True, help_text='Enter height in centimeters (e.g., 175.5).', null=True, validators=[django.core.validators.MinValueValidator(50.0), django.core.validators.MaxValueValidator(250.0)])),
                ('education', models.CharField(blank=True, choices=[('10th', '10th'), ('12th', '12th'), ('graduation', 'Graduation'), ('post graduation', 'Post Graduation'), ('doctorate', 'Doctorate')], help_text='Select your highest level of education.', max_length=20, null=True)),
                ('occupation', models.CharField(blank=True, help_text='Enter your occupation.', max_length=30, null=True)),
                ('occupation_sector', models.CharField(choices=[('government', 'Government'), ('private', 'Private'), ('business', 'Business'), ('other', 'Other')], max_length=20, verbose_name='Occupation Sector')),
                ('monthly_income', models.IntegerField(blank=True, help_text='Enter your monthly income in integer format.', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000000)])),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='primary_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Primary Profile',
                'verbose_name_plural': 'Primary Profiles',
                'ordering': ['user__username'],
            },
        ),
        migrations.CreateModel(
            name='Secondary',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nationality', models.CharField(default='Nepali', max_length=100, verbose_name='Nationality')),
                ('religion', models.CharField(blank=True, max_length=100, null=True, verbose_name='Religion')),
                ('caste', models.CharField(blank=True, max_length=100, null=True, verbose_name='Caste')),
                ('mother_tongue', models.CharField(default='Nepali', max_length=100, verbose_name='Mother Tongue')),
                ('known_languages', models.TextField(default='Nepali', help_text='List all known languages separated by commas', max_length=200, verbose_name='Known Languages')),
                ('marital_status', models.CharField(choices=[('married', 'Married'), ('single', 'Single'), ('divorced', 'Divorced'), ('widowed', 'Widowed')], default='Single', max_length=10, verbose_name='Marital Status')),
                ('is_living_in_foreign', models.BooleanField(default=False, verbose_name='Living in a Foreign Country')),
                ('living_foreign_country', models.CharField(blank=True, default=None, help_text='Leave blank if not living in a foreign country', max_length=100, null=True, verbose_name='Country Living In')),
                ('is_planning_foreign', models.BooleanField(default=False, verbose_name='Planning to Move Abroad')),
                ('planned_foreign_country', models.CharField(blank=True, default=None, help_text='Leave blank if not planning to move abroad', max_length=100, null=True, verbose_name='Planned Country to Move')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='secondary_profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
